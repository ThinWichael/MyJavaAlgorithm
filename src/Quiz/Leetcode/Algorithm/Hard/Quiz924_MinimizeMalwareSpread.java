package Quiz.Leetcode.Algorithm.Hard;

import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

//924. Minimize Malware Spread  (hint : union !!)
//
//In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
//
//Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.
//
//Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.
//
//We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
//
//Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.
//
// 
//
//Example 1:
//
//Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
//Output: 0
//Example 2:
//
//Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
//Output: 0
//Example 3:
//
//Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
//Output: 1
// 
//
//Note:
//
//1 < graph.length = graph[0].length <= 300
//0 <= graph[i][j] == graph[j][i] <= 1
//graph[i][i] = 1
//1 <= initial.length < graph.length
//0 <= initial[i] < graph.length

public class Quiz924_MinimizeMalwareSpread {

	public Quiz924_MinimizeMalwareSpread() {
		// TODO Auto-generated constructor stub
	}

	int[] groups;
	int[] count;

	public int minMalwareSpread(int[][] g, int[] initial) {
		// initial union array , union size array , malware count array
		int n = g.length;
		count = new int[n];
		groups = new int[n];
		for (int i = 0; i < n; i++) {
			groups[i] = i;
			count[i] = 1;
		}

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < g[0].length; j++) {
				if (g[i][j] == 1)
					union(i, j);
			}
		}

		// bucket sort using a priorityQueue in a map
		int max = 0;
		Map<Integer, PriorityQueue<Integer>> map = new HashMap<>();

		for (int v : initial) { // virus
			int gV = find(v);
			int c = count[gV];
			max = Math.max(c, max);

			if (!map.containsKey(c))
				map.put(c, new PriorityQueue<Integer>());
			map.get(c).add(v);
		}

		return map.get(max).peek();
	}

	private void union(int i, int j) {
		if (groups == null)
			return;

		int gJ = find(j); // group J
		int gI = find(i);
		if (gJ == gI)
			return;
		// else
		int c = count[gJ] + count[gI];
		if (count[gJ] > count[gI]) {
			groups[gI] = gJ; // become J group
			count[gJ] = c; // update count of group J
		} else {
			groups[gJ] = gI;
			count[gI] = c;
		}
	}

	private int find(int i) {
		if (groups[i] == i)
			return i;
		else {
			groups[i] = find(groups[i]);
			return groups[i];
		}
	}

	public static void main(String[] args) {
		Quiz924_MinimizeMalwareSpread q = new Quiz924_MinimizeMalwareSpread();
		// test case
		int[][] graph1 = {{1,0,0},{0,1,0},{0,0,1}};
		int[] initial1 = {0,2};
		System.out.println(q.minMalwareSpread(graph1, initial1));
		int[][] graph2 = {{1,0,0,0,0},{0,1,1,0,0},{0,1,1,0,0},{0,0,0,1,1},{0,0,0,1,1}};
		int[] initial2 = {1,3};
		System.out.println(q.minMalwareSpread(graph2, initial2));
		int[][] graph3 = {{1,0,0,1,0},{0,1,1,0,0},{0,1,1,0,0},{0,0,0,1,0},{0,0,0,1,1}}; // group: 045, 12
		int[] initial3 = {1,3};
		System.out.println(q.minMalwareSpread(graph3, initial3));
	}

}

// Solution Concept by @lee215 O(N^2)

// Solution version by @agritsik

//Union found all nodes.
//Count the union size of each union set.
//Count the malware number of each union set.
//
//Return the biggest union's malware if there is one and only one malware.
//If no such union that has and has only one malware,
//return the malware with minimum index.
//
//Time Complexity:
//O(N^2)
